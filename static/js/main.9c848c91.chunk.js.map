{"version":3,"sources":["components/Toolbar/Toolbar.module.css","modules/store/ThemeStore.ts","components/Toolbar/index.ts","components/Toolbar/Toolbar.tsx","modules/embedding/random.ts","constants.ts","modules/store/GraphStore.ts","App.tsx","modules/normalizers/forceGraph.ts","index.tsx"],"names":["module","exports","ThemeStoreInstance","colorVertex","localStorage","getItem","colorEdge","colorBackground","setColorVertex","setItem","setColorEdge","setColorBackground","makeAutoObservable","this","ThemeStoreContext","React","createContext","useThemeStore","useContext","Toolbar","observer","useState","colorBackgroundLocal","setColorBackgroundLocal","colorVertexLocal","setColorVertexLocal","colorEdgeLocal","setColorEdgeLocal","className","styles","root","pair","htmlFor","type","id","value","onChange","e","target","onBlur","randCord","Math","random","GraphStoreInstance","graphView","graphModel","setGraphData","data","graphml","UndirectedGraph","graph","vertices","nodeEntries","map","x","y","z","edges","edgeEntries","source","v1","find","v2","filter","edge","window","__graph__","GraphStoreContext","App","forceGraphData","setForceGraphData","useEffect","fetch","then","text","xml","visual","nodes","vertex","color","content","graphVisualToForceGraphNode","links","graphVisualToForceGraphLink","graphVisualToForceGraph","Provider","ThemeStore","GraphStore","graphData","linkOpacity","backgroundColor","linkWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c848c91.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Toolbar_root__1_haE\",\"pair\":\"Toolbar_pair__1hupD\"};","import { makeAutoObservable } from 'mobx';\nimport React, {useContext} from 'react';\n\nclass ThemeStore {\n\tpublic colorVertex: string = localStorage.getItem('colorVertex') || '#444';\n\tpublic colorEdge: string = localStorage.getItem('colorEdge') || 'yellow';\n\tpublic colorBackground: string = localStorage.getItem('colorBackground') || '#ddd';\n\n\tconstructor() {\n\t\tmakeAutoObservable(this);\n\t}\n\n\tsetColorVertex = (colorVertex: string) => {\n\t\tthis.colorVertex = colorVertex;\n\t\tlocalStorage.setItem('colorVertex', colorVertex);\n\t};\n\n\tsetColorEdge = (colorEdge: string) => {\n\t\tthis.colorEdge = colorEdge;\n\t\tlocalStorage.setItem('colorEdge', colorEdge);\n\t};\n\n\tsetColorBackground = (colorBackground: string) => {\n\t\tthis.colorBackground = colorBackground;\n\t\tlocalStorage.setItem('colorBackground', colorBackground);\n\t};\n}\n\nconst ThemeStoreInstance = new ThemeStore();\nexport const ThemeStoreContext = React.createContext(ThemeStoreInstance);\nexport const useThemeStore = () => useContext(ThemeStoreContext);\n\nexport default ThemeStoreInstance;\n","import { Toolbar } from './Toolbar';\nexport default Toolbar;\n","import React, {ChangeEvent, useState} from 'react';\nimport styles from './Toolbar.module.css';\nimport {observer} from 'mobx-react';\nimport {useThemeStore} from '../../modules/store/ThemeStore';\n\nexport const Toolbar: React.FC = observer(() => {\n\tconst { colorBackground, colorVertex, colorEdge, setColorBackground, setColorEdge, setColorVertex } = useThemeStore();\n\n\tconst [colorBackgroundLocal, setColorBackgroundLocal] = useState(colorBackground);\n\tconst [colorVertexLocal, setColorVertexLocal] = useState(colorVertex);\n\tconst [colorEdgeLocal, setColorEdgeLocal] = useState(colorEdge);\n\n\tconst onColorBackgroundChange = (e: ChangeEvent<HTMLInputElement>) => setColorBackgroundLocal(e.target.value);\n\tconst onColorVertexChange = (e: ChangeEvent<HTMLInputElement>) => setColorVertexLocal(e.target.value);\n\tconst onColorEdgeChange = (e: ChangeEvent<HTMLInputElement>) => setColorEdgeLocal(e.target.value);\n\n\tconst onColorBackgroundBlur = () => setColorBackground(colorBackgroundLocal);\n\tconst onColorVertexBlur = () => setColorVertex(colorVertexLocal);\n\tconst onColorEdgeBlur = () => setColorEdge(colorEdgeLocal);\n\n\treturn (\n\t\t<div className={styles.root}>\n\t\t\t<span className={styles.pair}>\n\t\t\t\t<label htmlFor=\"edge-color\">Цвет ребер</label>\n\t\t\t\t<input type=\"color\"\n\t\t\t\t\t   id=\"edge-color\"\n\t\t\t\t\t   value={colorEdgeLocal}\n\t\t\t\t\t   onChange={onColorEdgeChange}\n\t\t\t\t\t   onBlur={onColorEdgeBlur}\n\t\t\t\t/>\n\t\t\t</span>\n\n\t\t\t<span className={styles.pair}>\n\t\t\t\t<label htmlFor=\"vertex-color\">Цвет вершин</label>\n\t\t\t\t<input type=\"color\"\n\t\t\t\t\t   id=\"vertex-color\"\n\t\t\t\t\t   value={colorVertexLocal}\n\t\t\t\t\t   onChange={onColorVertexChange}\n\t\t\t\t\t   onBlur={onColorVertexBlur}\n\t\t\t\t/>\n\t\t\t</span>\n\n\t\t\t<span className={styles.pair}>\n\t\t\t\t<label htmlFor=\"background-color\">Цвет фона</label>\n\t\t\t\t<input type=\"color\"\n\t\t\t\t\t   id=\"background-color\"\n\t\t\t\t\t   value={colorBackgroundLocal}\n\t\t\t\t\t   onChange={onColorBackgroundChange}\n\t\t\t\t\t   onBlur={onColorBackgroundBlur}\n\t\t\t\t/>\n\t\t\t</span>\n\t\t</div>\n\t);\n});\n","import {Edge, GraphVisual, Vertex} from '../../types/3d';\nimport {UndirectedGraph} from 'graphology';\nimport {BOUNDARY_SIZE} from '../../constants';\n\nconst randCord = () => Math.random() * BOUNDARY_SIZE;\n\nexport default (graph: UndirectedGraph): GraphVisual => {\n\t// @ts-ignore\n\tconst verticesEntries = [...graph.nodeEntries()];\n\n\tconst vertices = verticesEntries.map(([id]: any[]) => {\n\t\tconst vertex: Vertex = {\n\t\t\tid,\n\t\t\tx: randCord(),\n\t\t\ty: randCord() - 5,\n\t\t\tz: randCord() - 10,\n\t\t};\n\n\t\treturn vertex;\n\t});\n\n\t// @ts-ignore\n\tconst edgesEntries = [...graph.edgeEntries()];\n\n\tconst edges = edgesEntries\n\t\t.map(([key, attrs, source, target]: any[]) => {\n\t\t\tconst v1 = vertices.find(({id}) => id === source);\n\t\t\tconst v2 = vertices.find(({id}) => id === target);\n\n\t\t\tif (!(v1 && v2)) return null;\n\n\t\t\tconst edge: Edge = {\n\t\t\t\tv1,\n\t\t\t\tv2,\n\t\t\t};\n\n\t\t\treturn edge;\n\t\t})\n\t\t.filter(edge => edge !== null);\n\n\t// @ts-ignore\n\twindow.__graph__ = graph;\n\n\treturn {\n\t\tvertices,\n\t\tedges,\n\t} as GraphVisual;\n};\n","export const BOUNDARY_SIZE = 10;\n","import {GraphVisual} from '../../types/3d';\nimport * as graphml from 'graphology-graphml/browser';\nimport {UndirectedGraph} from 'graphology';\nimport random from '../embedding/random';\nimport { makeAutoObservable } from 'mobx';\nimport React, {useContext} from 'react';\n\nclass GraphStore {\n\tpublic graphView: GraphVisual | null = null;\n\tprivate graphModel: UndirectedGraph | null = null;\n\n\tconstructor() {\n\t\tmakeAutoObservable(this);\n\t}\n\n\tsetGraphData = (data: string) => {\n\t\tthis.graphModel = graphml.parse(UndirectedGraph, data);\n\t\tthis.graphView = random(this.graphModel!);\n\t}\n}\n\nconst GraphStoreInstance = new GraphStore();\nexport const GraphStoreContext = React.createContext(GraphStoreInstance);\nexport const useGraphStore = () => useContext(GraphStoreContext);\n\nexport default GraphStoreInstance;\n","import React, {useEffect, useState} from 'react';\n// @ts-ignore\nimport Toolbar from './components/Toolbar';\nimport {Scene3d} from './components/Scene3d/Scene3d';\nimport {observer} from 'mobx-react';\nimport ThemeStore, {useThemeStore, ThemeStoreContext} from './modules/store/ThemeStore';\nimport GraphStore, {useGraphStore, GraphStoreContext} from './modules/store/GraphStore';\nimport ForceGraph3D, {GraphData} from 'react-force-graph-3d';\nimport {graphVisualToForceGraph} from \"./modules/normalizers/forceGraph\";\n\n\nconst App: React.FC = observer(() => {\n\tconst { graphView, setGraphData } = useGraphStore();\n\tconst [forceGraphData, setForceGraphData] = useState<GraphData | null>(null);\n\tconst { colorVertex, colorEdge, colorBackground } = useThemeStore();\n\tuseEffect(() => {\n\t\tfetch('example.graphml')\n\t\t\t.then(data => data.text())\n\t\t\t.then(xml => setGraphData(xml));\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (graphView) {\n\t\t\tsetForceGraphData(graphVisualToForceGraph(graphView, colorVertex, colorEdge));\n\t\t}\n\t}, [colorEdge, colorVertex, graphView]);\n\n    // @ts-ignore\n    return (\n    \t<ThemeStoreContext.Provider value={ThemeStore}>\n\t\t\t<GraphStoreContext.Provider value={GraphStore}>\n\t\t\t\t<Toolbar />\n\t\t\t\t{/*{graphView && (*/}\n\t\t\t\t{/*\t<Scene3d graph={graphView}*/}\n\t\t\t\t{/*\t\t\t colorVertex={colorVertex}*/}\n\t\t\t\t{/*\t\t\t colorEdge={colorEdge}*/}\n\t\t\t\t{/*\t\t\t colorBackground={colorBackground}*/}\n\t\t\t\t{/*\t/>*/}\n\t\t\t\t{/*)}*/}\n\t\t\t\t{forceGraphData && (\n\t\t\t\t\t<ForceGraph3D\n\t\t\t\t\t\tgraphData={forceGraphData}\n\t\t\t\t\t\tlinkOpacity={1}\n\t\t\t\t\t\tbackgroundColor={colorBackground}\n\t\t\t\t\t\tlinkWidth={1}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</GraphStoreContext.Provider>\n\t\t</ThemeStoreContext.Provider>\n    );\n});\n\nexport default App;\n","import {Edge, GraphVisual, Vertex} from '../../types/3d';\nimport {GraphData, LinkObject, NodeObject} from 'react-force-graph-3d';\n\n// TODO: как отображать контент?\nconst graphVisualToForceGraphNode = (vertex: Vertex, color: string): NodeObject & { color: string; content?: string; } => ({\n    id: vertex.id,\n    content: vertex.content,\n    color\n    // x: vertex.x,\n    // y: vertex.y,\n    // z: vertex.z,\n});\n\n// TODO: как отображать контент?\nconst graphVisualToForceGraphLink = (edge: Edge, color: string): LinkObject & { color: string } => ({\n    source: edge.v1.id,\n    target: edge.v2.id,\n    color,\n});\n\nexport const graphVisualToForceGraph = (visual: GraphVisual, colorVertex: string, colorEdge: string): GraphData  => {\n    const nodes = visual.vertices.map((vertex) => graphVisualToForceGraphNode(vertex, colorVertex));\n    const links = visual.edges.map((edge) => graphVisualToForceGraphLink(edge, colorEdge));\n    return { nodes, links };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}