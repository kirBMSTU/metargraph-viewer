{"version":3,"file":"static/js/mv.js","mappings":"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","sources":["webpack://metagraph-viewer/./src/components/Toolbar/Toolbar.module.css?d4fb","modules/store/ThemeStore.ts","components/Toolbar/index.ts","components/Toolbar/Toolbar.tsx","modules/store/GraphStore/GraphStore.ts","modules/store/GraphStore/context.ts","modules/store/GraphStore/index.ts","components/ForceGraph/ForceGraph.tsx","App.tsx","components/ForceGraph/index.ts","library/MetagraphViewer.tsx","utils/useLocalStore.ts","library/index.ts","lib.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Toolbar_root__LlMrG\",\"pair\":\"Toolbar_pair__j4DXd\"};","import { makeAutoObservable } from 'mobx';\nimport React, {useContext} from 'react';\n\nclass ThemeStore {\n\tpublic colorVertex: string = localStorage.getItem('colorVertex') || '#444';\n\tpublic colorEdge: string = localStorage.getItem('colorEdge') || 'yellow';\n\tpublic colorBackground: string = localStorage.getItem('colorBackground') || '#ddd';\n\n\tconstructor() {\n\t\tmakeAutoObservable(this);\n\t}\n\n\tsetColorVertex = (colorVertex: string) => {\n\t\tthis.colorVertex = colorVertex;\n\t\tlocalStorage.setItem('colorVertex', colorVertex);\n\t};\n\n\tsetColorEdge = (colorEdge: string) => {\n\t\tthis.colorEdge = colorEdge;\n\t\tlocalStorage.setItem('colorEdge', colorEdge);\n\t};\n\n\tsetColorBackground = (colorBackground: string) => {\n\t\tthis.colorBackground = colorBackground;\n\t\tlocalStorage.setItem('colorBackground', colorBackground);\n\t};\n}\n\nconst ThemeStoreInstance = new ThemeStore();\nexport const ThemeStoreContext = React.createContext(ThemeStoreInstance);\nexport const useThemeStore = () => useContext(ThemeStoreContext);\n\nexport default ThemeStoreInstance;\n","import { Toolbar } from './Toolbar';\nexport default Toolbar;\n","import React, {ChangeEvent, useState} from 'react';\nimport styles from './Toolbar.module.css';\nimport {observer} from 'mobx-react';\nimport {useThemeStore} from '../../modules/store/ThemeStore';\n\nexport const Toolbar: React.FC = observer(() => {\n\tconst { colorBackground, colorVertex, colorEdge, setColorBackground, setColorEdge, setColorVertex } = useThemeStore();\n\n\tconst [colorBackgroundLocal, setColorBackgroundLocal] = useState(colorBackground);\n\tconst [colorVertexLocal, setColorVertexLocal] = useState(colorVertex);\n\tconst [colorEdgeLocal, setColorEdgeLocal] = useState(colorEdge);\n\n\tconst onColorBackgroundChange = (e: ChangeEvent<HTMLInputElement>) => setColorBackgroundLocal(e?.target.value);\n\tconst onColorVertexChange = (e: ChangeEvent<HTMLInputElement>) => setColorVertexLocal(e?.target.value);\n\tconst onColorEdgeChange = (e: ChangeEvent<HTMLInputElement>) => setColorEdgeLocal(e?.target.value);\n\n\tconst onColorBackgroundBlur = () => setColorBackground(colorBackgroundLocal);\n\tconst onColorVertexBlur = () => setColorVertex(colorVertexLocal);\n\tconst onColorEdgeBlur = () => setColorEdge(colorEdgeLocal);\n\n\treturn (\n\t\t<div className={styles.root}>\n\t\t\t<span className={styles.pair}>\n\t\t\t\t<label htmlFor=\"edge-color\">Цвет ребер</label>\n\t\t\t\t<input type=\"color\"\n\t\t\t\t\t   id=\"edge-color\"\n\t\t\t\t\t   value={colorEdgeLocal}\n\t\t\t\t\t   onChange={onColorEdgeChange}\n\t\t\t\t\t   onBlur={onColorEdgeBlur}\n\t\t\t\t/>\n\t\t\t</span>\n\n\t\t\t<span className={styles.pair}>\n\t\t\t\t<label htmlFor=\"vertex-color\">Цвет вершин</label>\n\t\t\t\t<input type=\"color\"\n\t\t\t\t\t   id=\"vertex-color\"\n\t\t\t\t\t   value={colorVertexLocal}\n\t\t\t\t\t   onChange={onColorVertexChange}\n\t\t\t\t\t   onBlur={onColorVertexBlur}\n\t\t\t\t/>\n\t\t\t</span>\n\n\t\t\t<span className={styles.pair}>\n\t\t\t\t<label htmlFor=\"background-color\">Цвет фона</label>\n\t\t\t\t<input type=\"color\"\n\t\t\t\t\t   id=\"background-color\"\n\t\t\t\t\t   value={colorBackgroundLocal}\n\t\t\t\t\t   onChange={onColorBackgroundChange}\n\t\t\t\t\t   onBlur={onColorBackgroundBlur}\n\t\t\t\t/>\n\t\t\t</span>\n\t\t</div>\n\t);\n});\n","import * as graphml from 'graphology-graphml/browser';\nimport { UndirectedGraph } from 'graphology';\nimport { action, computed, makeObservable, observable } from 'mobx';\nimport { ILocalStore } from '../../../utils/useLocalStore';\nimport { EdgeEntry, NodeEntry } from 'graphology-types';\nimport { GraphData, NodeObject } from 'react-force-graph-3d';\n\ntype PrivateFields = '_expandedNodes' | '_graphModel';\n\n/** Получить id вершины для начала/конца ребра. Нужно, тк там может быть как id, так и object */\nconst getEdgesVertexID = (node: string | NodeObject): string =>\n  typeof node === 'string' ? node : String(node.id);\n\nclass GraphStore implements ILocalStore {\n  private _graphModel: UndirectedGraph | null = null;\n  private _expandedNodes = new Set<string>();\n\n  constructor(graphData?: string) {\n    makeObservable<GraphStore, PrivateFields>(this, {\n      _expandedNodes: observable,\n      _graphModel: observable.ref,\n      expandNode: action.bound,\n      setGraphData: action.bound,\n      vertices: computed,\n      edges: computed,\n      graphDataNormalized: computed,\n    });\n\n    if (graphData) {\n      this.setGraphData(graphData);\n    }\n  }\n\n  setGraphData = (data: string) => {\n    this._graphModel = graphml.parse(UndirectedGraph, data);\n  };\n\n  /** Раскрыть метавершину, чтобы увидеть ее содержимое */\n  expandNode = (vertex: NodeObject): void => {\n    this._expandedNodes.add(String(vertex.id));\n  };\n\n  isExpanded = (vertexId: string): boolean => this._expandedNodes.has(vertexId);\n\n  /** Получить содержимое метавершины */\n  getNested = (vertex: NodeObject): GraphData => {\n    const nodes: NodeObject[] = (\n      this.allVertices.filter((v) => {\n        const [, parentId] = v.node.match(/(.*)::.*/) || [];\n        return Boolean(parentId === vertex.id) && this.isExpanded(parentId);\n      }) ?? []\n    ).map(({ node: id, attributes }) => ({ ...attributes, id }));\n\n    const links =\n      this.allEdges.filter(\n        (edge: EdgeEntry) =>\n          nodes.find(\n            (v: NodeObject) => v.id === getEdgesVertexID(edge?.source)\n          ) &&\n          nodes.find((v: NodeObject) => v.id === getEdgesVertexID(edge?.target))\n      ) ?? [];\n\n\n    return {\n      links,\n      nodes,\n    };\n  };\n\n  /** Все вершины метаграфа, вне зависимости от состояния родителей */\n  get allVertices(): NodeEntry[] {\n    return [...(this._graphModel?.nodeEntries() ?? ([] as NodeEntry[]))];\n  }\n\n  /** Только видимые вершины (без скрытых внутри неразвернутых метавершин) */\n  get vertices(): NodeEntry[] {\n    const excludeCollapsed = this.allVertices.filter((vertex: NodeEntry) => {\n      const match = vertex.node.match(/(.*)::.*/);\n      const isNested = Boolean(match);\n\n      if (!isNested) {\n        return true;\n      }\n\n      // return false;\n\n      const [, parentId] = match || [];\n      return this._expandedNodes.has(parentId);\n    });\n\n    return excludeCollapsed;\n  }\n\n  /** Все ребра метаграфа, вне зависимости от состояние вершин, которые они соединяют */\n  get allEdges(): EdgeEntry[] {\n    return [...(this._graphModel?.edgeEntries() ?? ([] as EdgeEntry[]))];\n  }\n\n  /**\n   * Только видимые ребра метаграфа\n   * (без ребер, начало и/или конец которых скрыты внутри неразвернутых метавершин)\n   */\n  get edges(): EdgeEntry[] {\n    const existing = this.allEdges.filter((edge: EdgeEntry) => {\n      const hasSource = this.vertices.some(\n        (vertex: NodeEntry) => vertex.node === getEdgesVertexID(edge.source)\n      );\n      const hasTarget = this.vertices.some(\n        (vertex: NodeEntry) => vertex.node === getEdgesVertexID(edge.target)\n      );\n\n      return hasTarget && hasSource;\n    });\n\n    const result = existing.filter((edge: EdgeEntry) => {\n      // return true;\n      const match1 = getEdgesVertexID(edge?.source).match?.(/(.*)::.*/);\n      const match2 = getEdgesVertexID(edge?.target).match?.(/(.*)::.*/);\n\n      const isComplex1 = Boolean(match1);\n      const isComplex2 = Boolean(match2);\n\n      if (!isComplex1 && !isComplex2) return true;\n\n      const [, parent1] = match1 || [];\n      const [, parent2] = match2 || [];\n\n      return (\n        (this._expandedNodes.has(parent1) || !parent1) && (this._expandedNodes.has(parent2) || !parent2)\n      );\n    });\n    return result;\n  }\n\n  /** Максимальный уровень вложенности из раскрытых вершин */\n  get maxExpandedNestedLevel(): number {\n    return Math.max(\n      ...[...this._expandedNodes]\n        .map((node) => node.split('::').length)\n    ) + 1;\n  }\n\n  /** Данные о вершинах и ребрах метаграфа, нормализованные для react-force-graph-3d */\n  get graphDataNormalized(): GraphData {\n    return {\n      nodes: this.vertices.map(({ node: id, attributes }) => ({\n        ...attributes,\n        id,\n      })),\n      links: this.edges,\n    };\n  }\n\n  destroy(): void {}\n}\n\nexport default GraphStore;\n","import React from 'react';\nimport GraphStore from './GraphStore';\n\nexport const GraphStoreContext = React.createContext<GraphStore | undefined>(\n    undefined\n  );\n  \nexport const useGraphStore = (): GraphStore => {\n    const context = React.useContext(GraphStoreContext);\n    if (context === undefined) {\n        console.warn(\n        'Metagraph Viewer: GraphStore instance was not provided into context'\n        );\n\n        // @ts-ignore\n        return {};\n    }\n\n    return context\n};","import GraphStore from './GraphStore';\nexport default GraphStore;\nexport * from './context';","import { observer } from 'mobx-react-lite';\nimport React, { useRef, useEffect, useCallback } from 'react';\nimport ForceGraph3D, { GraphData, ForceGraphMethods, NodeObject, LinkObject } from 'react-force-graph-3d';\nimport { useThemeStore } from '../../modules/store/ThemeStore';\nimport ThreeForceGraph from 'three-forcegraph';\nimport * as THREE from 'three';\nimport * as d3 from 'd3';\nimport { useGraphStore } from '../../modules/store/GraphStore';\n\n/**\n * Цвета вложенных вершин\n */\nconst NESTED_COLORS: string[] = [\n    'green',\n    'green',\n    'red',\n    'purple',\n    'yellow',\n    'lightblue',\n];\n\nconst getNestedVertexColor = (level: number): string => NESTED_COLORS[level % NESTED_COLORS.length];\n\nconst getNestedLevel = (node: NodeObject | string): number => String(typeof node === 'string' ? node : node.id).split('::').length;\n\n\n/** Сила, которая направляет все вершины-дети к их раскрытым родителям */\nfunction forceNestedToParents() {\n    let nodes: NodeObject[];\n  \n    function force(alpha: number) {\n        nodes?.forEach((vertex: NodeObject) => {\n            const [, parentId] = String(vertex.id)?.match(/(.*)::.*/) || [];\n            const parent = nodes.find(v => v.id === parentId);\n\n            if (parent) {\n                const k = alpha * 0.7;\n\n                vertex.x! += (parent.x! - vertex.x!) * k;\n                vertex.y! += (parent.y! - vertex.y!) * k;\n                vertex.z! += (parent.z! - vertex.z!) * k;\n            }\n        })\n    }\n  \n    function initialize() {}\n  \n    force.initialize = function(_nodes: NodeObject[]) {\n        nodes = _nodes;\n        initialize();\n    };\n  \n    return force;\n}\n\nconst ForceGraph: React.FC = () => {\n    const graphRef = useRef<ForceGraphMethods | undefined>();\n    const { colorBackground, colorVertex, colorEdge } = useThemeStore();\n    const { expandNode, getNested, graphDataNormalized, maxExpandedNestedLevel } = useGraphStore();\n\n    useEffect(() => {\n        const fg = graphRef.current as ForceGraphMethods;\n\n        if (!fg) return;\n\n        // @ts-ignore\n        fg.d3Force('charge', d3.forceManyBody().strength((vertex: NodeObject) => {\n            // @ts-ignore\n            const match = vertex.id.match(/(.*)::.*/);\n        \n            return match ? -1500 : -1500;\n        }));\n\n        fg.d3Force('center', forceNestedToParents());\n\n        // @ts-ignore\n        fg.d3Force('link').distance((link: LinkObject) => {\n            const { source, target } = link;\n\n            const sourceNested = getNested(source as NodeObject);\n            const sourceHasNested = Boolean(sourceNested.nodes.length);\n            \n            const targetNested = getNested(target as NodeObject);\n            const targetHasNested = Boolean(targetNested.nodes.length);\n\n            const sourceNestedLevel = getNestedLevel(source as NodeObject);\n            const targetNestedLevel = getNestedLevel(source as NodeObject);\n\n            const radiusKoef = maxExpandedNestedLevel - Math.max(sourceNestedLevel, targetNestedLevel);\n\n            const distance = sourceHasNested || targetHasNested ? 300 * radiusKoef : 10;\n            return distance;\n        });\n    }, [graphRef.current]);\n\n    return (\n        <ForceGraph3D\n            ref={graphRef}\n            numDimensions={3}\n            nodeLabel='id'\n            linkLabel='edge'\n            graphData={graphDataNormalized}\n            linkOpacity={1}\n            linkColor={(link: LinkObject): string => {\n                const { source, target } = link;\n\n                const sourceNestedLevel = getNestedLevel(source as NodeObject);\n                const sourceIsNested = sourceNestedLevel > 1;\n\n                const targetNestedLevel = getNestedLevel(target as NodeObject);\n                const targetIsNested = targetNestedLevel > 1;\n\n                const maxLevel = Math.max(sourceNestedLevel, targetNestedLevel) - 1;\n\n                const color = sourceIsNested || targetIsNested ? getNestedVertexColor(maxLevel) : colorEdge;\n\n                return color;\n            }}\n            backgroundColor={colorBackground}\n            linkWidth={1}\n            linkDirectionalParticleWidth={6}\n            onNodeClick={expandNode}\n            showNavInfo={false}\n            linkDirectionalParticles={() => 10}\n            nodeThreeObject={\n                (vertex: NodeObject) => {\n                    const nested = getNested(vertex);\n                    const hasNested = Boolean(nested.nodes.length);\n\n                    const nestedLevel = getNestedLevel(vertex);\n                    \n                    const radiusKoef = maxExpandedNestedLevel - nestedLevel;\n                    const sphereRadius = hasNested ? 200 * radiusKoef : 15;\n                    const sphereOpacity = hasNested ? 0.13 : 1;\n\n                    const isNested = nestedLevel > 1;\n\n                    const color = isNested ? getNestedVertexColor(nestedLevel - 1) : colorVertex;\n\n                    // @ts-ignore\n                    const geometry = new THREE.SphereGeometry(sphereRadius, 32, 16);\n                    const material = new THREE.MeshBasicMaterial({\n                        color,\n                        opacity: sphereOpacity,\n                        transparent: hasNested,\n                        wireframe: hasNested,\n                    });\n                    const sphere = new THREE.Mesh(geometry, material);\n                    return sphere;\n                }\n            }\n        />\n    )\n};\n\nexport default observer(ForceGraph)","import React from 'react';\nimport Toolbar from './components/Toolbar';\nimport { observer } from 'mobx-react';\nimport ThemeStore, { ThemeStoreContext } from './modules/store/ThemeStore';\nimport GraphStore, { GraphStoreContext } from './modules/store/GraphStore';\nimport { useLocalStore } from './utils/useLocalStore';\nimport ForceGraph from './components/ForceGraph';\n\n/** Режим работы приложения */\nexport enum Mode {\n  /** Режим библиотеки */\n  library = 'library',\n  /** Демо-режим */\n  demo = 'demo',\n}\n\ntype Props = {\n  /** Режим работы приложения: Библиотека или Демо-режим */\n  mode: Mode;\n  /** Данные о вершинах и ребрах метаграфа в виде строки */\n  graphString: string;\n};\n\nconst App: React.FC<Props> = ({ mode, graphString }: Props) => {\n  const graphStore = useLocalStore(() => new GraphStore(graphString));\n\n  return (\n    <ThemeStoreContext.Provider value={ThemeStore}>\n      <GraphStoreContext.Provider value={graphStore}>\n        {mode === Mode.demo && <Toolbar />}\n        <ForceGraph />\n      </GraphStoreContext.Provider>\n    </ThemeStoreContext.Provider>\n  );\n};\n\nexport default observer(App);\n","import ForceGraph from './ForceGraph';\nexport default ForceGraph;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App, { Mode } from '../App';\n\nenum DataSourceKind {\n    /** url до файла, содержащего graphml разметку графа */\n    graphmlUrl = 'graphml-url',\n    /** строка, содержащая graphml разметку графа */\n    graphmlString = 'graphml-string'\n}\n\ntype GraphmlUrl = {\n    type: DataSourceKind.graphmlUrl;\n    url: string;\n}\n\ntype GraphmlString = {\n    type: DataSourceKind.graphmlString;\n    str: string;\n}\n\ntype DataSource = GraphmlUrl | GraphmlString;\n\nconst isGraphmlUrl = (data: DataSource): data is GraphmlUrl => data.type === DataSourceKind.graphmlUrl;\nconst isGraphmlString = (data: DataSource): data is GraphmlString => data.type === DataSourceKind.graphmlString;\n\n\ntype Params = {\n    /** Элемент, в который необходимо встроить просмотрщик метаграфа */\n    containerEl?: Element;\n    /** Селектор элемент, в который необходимо встроить просмотрщик метаграфа */\n    containerSelector?: string;\n    /**\n     * Встроить просмотрщик сразу при создании\n     * @default true\n     */\n    initialRender?: boolean;\n    /** Данные о вершинах и ребрах метаграфа в одном из форматов */\n    data: DataSource;\n    /** Режим работы приложения (библиотека/демо-режим) */\n    mode?: Mode;\n};\n\n/** Основной класс для работы с библиотекой metagraph-viewer */\nexport class MetagraphViewer {\n    readonly _params: Params;\n    readonly id = Date.now() * Math.random();\n\n    constructor(params: Params) {\n        this._params = params;\n\n        if (params.initialRender !== false) {\n            this.render();\n        }\n    }\n\n    /** Данные о вершинах и ребрах метаграфа */\n    get graphData(): Promise<string> {\n        const { data } = this._params;\n\n        if (isGraphmlString(data)) {\n            return Promise.resolve(data.str);\n        }\n\n        if (isGraphmlUrl(data)) {\n            return fetch(data.url).then(data => data.text())\n        }\n\n        return Promise.reject(`Metagraph Viewer: unknown type of data: ${data}`);\n    }\n\n    /** Отрисовать просмотрщик метаграфа в переданном контейнере */\n    async render(): Promise<void> {\n        const { containerEl, containerSelector, mode = Mode.library } = this._params;\n        const element = containerEl || (containerSelector && document.querySelector(containerSelector));\n\n        if (!element) {\n            console.warn(\n                `Metagraph Viewer: containerEl or containerSelector must be provided!,\n                but given ${containerEl}, ${containerSelector} for graph with id=${this.id}`\n            );\n            return;\n        }\n\n        const graphData = await this.graphData;\n\n        const reactRoot = createRoot(element);\n        reactRoot.render(<App mode={mode} graphString={graphData} />);\n    }\n\n    static DataSourceKind = DataSourceKind;\n}","import { useRef, useEffect } from 'react';\n\nexport type ILocalStore = {\n    destroy(): void;\n};\n\nexport const useLocalStore = <T extends ILocalStore>(creator: () => T): T => {\n    const ref = useRef<T>();\n\n    if (!ref.current) {\n        ref.current = creator();\n    }\n\n    useEffect(() => () => ref.current?.destroy(), []);\n\n    return ref.current;\n};\n","import { MetagraphViewer } from './MetagraphViewer';\nexport default MetagraphViewer;","import MetagraphViewer from './library';\n\ndeclare global {\n    interface Window {\n        MetagraphViewer: typeof MetagraphViewer; \n        MV: typeof MetagraphViewer; \n    }\n}\n\n// TODO: сделать сборку для esm, umd\nwindow.MetagraphViewer = MetagraphViewer;\nwindow.MV = MetagraphViewer;\n"],"names":["ThemeStoreInstance","ThemeStore","colorVertex","localStorage","getItem","colorEdge","colorBackground","setColorVertex","setItem","setColorEdge","setColorBackground","makeAutoObservable","this","ThemeStoreContext","React","useThemeStore","useContext","observer","useState","colorBackgroundLocal","setColorBackgroundLocal","colorVertexLocal","setColorVertexLocal","colorEdgeLocal","setColorEdgeLocal","className","styles","htmlFor","type","id","value","onChange","e","target","onBlur","getEdgesVertexID","node","String","GraphStore","graphData","_graphModel","_expandedNodes","Set","setGraphData","data","graphml","UndirectedGraph","expandNode","vertex","add","isExpanded","vertexId","has","getNested","nodes","allVertices","filter","v","match","parentId","Boolean","map","attributes","links","allEdges","edge","find","source","makeObservable","observable","action","vertices","computed","edges","graphDataNormalized","nodeEntries","edgeEntries","hasSource","some","match1","match2","isComplex1","isComplex2","parent1","parent2","Math","max","split","length","GraphStoreContext","undefined","NESTED_COLORS","getNestedVertexColor","level","getNestedLevel","Mode","graphRef","useRef","context","console","warn","useGraphStore","maxExpandedNestedLevel","useEffect","fg","current","d3Force","d3","strength","force","alpha","forEach","parent","k","x","y","z","initialize","_nodes","forceNestedToParents","distance","link","sourceNested","sourceHasNested","targetNested","targetHasNested","sourceNestedLevel","targetNestedLevel","radiusKoef","ref","numDimensions","nodeLabel","linkLabel","linkOpacity","linkColor","sourceIsNested","targetIsNested","maxLevel","backgroundColor","linkWidth","linkDirectionalParticleWidth","onNodeClick","showNavInfo","linkDirectionalParticles","nodeThreeObject","nested","hasNested","nestedLevel","sphereRadius","sphereOpacity","color","geometry","THREE","material","opacity","transparent","wireframe","DataSourceKind","mode","graphString","graphStore","creator","destroy","useLocalStore","Provider","demo","MetagraphViewer","params","_params","Date","now","random","initialRender","render","graphmlString","isGraphmlString","Promise","resolve","str","graphmlUrl","isGraphmlUrl","fetch","url","then","text","reject","containerEl","containerSelector","library","element","document","querySelector","createRoot","window","MV"],"sourceRoot":""}